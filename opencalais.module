<?php
/**
 * @file opencalais.module
 */

// Request constants
define('CALAIS_REQUEST_NO',             0);
define('CALAIS_REQUEST_MANUAL',         1);
define('CALAIS_REQUEST_AUTO',           2);
define('CALAIS_REQUEST_AUTO_PUBLISHED', 3);
 
// Constants for how to apply tags once retrieved
define('CALAIS_PROCESS_MANUAL', 0);
define('CALAIS_PROCESS_AUTO',   1);
 
define('CALAIS_WATCHDOG', 'OpenCalais');
 
// Node Build Mode Contant
define('CALAIS_PROCESSED', TRUE);
  
/**
 * Implements hook_permission().
 */
function opencalais_permission() {
  return array();
}

/**
 * Implementation of hook_menu().
 */
function opencalais_menu() {
  $items = array();

  $items['admin/config/content/opencalais/tagging'] = array(
    'title' => 'Tagging',
    'description' => 'Configure Entity Tagging',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opencalais_admin_general_settings'),
    'access arguments' => array('administer opencalais'),
    'file' => 'opencalais.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/config/content/opencalais/disable_item'] = array(
    'page callback' => 'opencalais_disable_other_preset_js',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/structure/types/manage/%/opencalais_fields'] = array(
    'title' => 'OpenCalais Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opencalais_add_fields_form', 1),
    'access arguments' => array('administer opencalais'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function opencalais_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'opencalais');
  return array(
    'opencalais_suggestions' => array(
      'variables' => array('type' => NULL, 'field_name' => NULL, 'suggestions' => NULL, 'language' => LANGUAGE_NONE),
      'path' => "$path/theme",
      'template' => 'opencalais_suggestions',
    ),
    'opencalais_preset_form' => array(
      'render element' => 'form',
      'path' => "$path/theme",
      'file' => 'theme.inc',
    ),
    'opencalais_add_fields_entities' => array(
      'render element' => 'info',
      'path' => "$path/theme",
      'file' => 'theme.inc',
    ),
  );
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function opencalais_form_node_form_alter(&$form, &$form_state, $form_id) {  
  $node = $form['#node'];
  $fields = opencalais_get_opencalais_tag_fields($form, 'node', $node->type); 
  $extra = array();
 // dpm($node, 'node before passage');
  foreach ($fields as $opencalais_type => $field_name) {
    // Load suggestions
    $suggestions = opencalais_get_suggestions($node, $opencalais_type);
    $vars = array(
      'type' => $opencalais_type, 
      'field_name' => $field_name, 
      'suggestions' => $suggestions, 
      'language' => $form['language']['#value']
    );
    $themed_suggestions = theme('opencalais_suggestions', $vars); 
    $form[$field_name]['#suffix'] = $themed_suggestions;
    $extra[$field_name] = $suggestions; 
  }
  $form_state['opencalais_extras'] = $extra;
  
  
  if($fields){
          
    // Should we collect them in vertical tabs?
    if (variable_get('opencalais_tags_in_verticaltab', FALSE)) {
      $form['opencalais']  = array(
        '#type' => 'fieldset', 
        '#title' => t('OpenCalais Tags'), 
        '#collapsible' => TRUE, 
        '#collapsed' => TRUE, 
        '#group' => 'additional_settings', 
        '#weight' => -2, 
      );    
      foreach ($fields as $field_name) {
        $form['opencalais'][$field_name] = $form[$field_name];
        unset($form[$field_name]);
      }
      
      $path = drupal_get_path('module', 'opencalais');
      $form['opencalais']['suggest_tags'] = array(
        '#type' => 'submit', 
        '#value' => t('Suggest Tags'),
        '#prefix' => '<div class="messages status opencalais_button_holder">',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('opencalais_submit')),
        '#weight' => -20,
        '#submit' => array('opencalais_suggest_tags_submit'),     
        '#ajax' => array(
          'callback' => 'opencalais_suggest_tags_callback',  
          'effect' => 'fade',
        ),
        '#attached' => array(
          'js' => array($path . '/theme/opencalais.node.js'),
          'css' => array($path . '/theme/opencalais.node.css'),
        )
      );
      $form['#submit'][] = 'opencalais_handle_node_submit';
    }
  }
}

/**
 *  Handle form submit of nodes with opencalais terms
 */
function opencalais_handle_node_submit($form, &$form_state){
  //find the the extra fields with extra values
    $extras = $form_state['opencalais_extras'];
    drupal_set_message('OC: <pre>'.print_r($extras, true).'</pre>');
    foreach($extras as $field=>$value){
      $lang = field_available_languages('taxonomy_term', $field);
      if(isset($form['language']['#value']) && in_array($form['language']['#value'], $lang)){
        $lang = $form['language']['#value'];
      } else {
        $lang = 'und';
      }
      
      if(isset($form_state['values'][$field])){
        $field_values = $form_state['values'][$field]['und'];
        foreach($field_values as $i=>$v){
          if(isset($extras[$field][$v['name']])){
            $eV = $extras[$field][$v['name']]['extra'];
            foreach($eV as $n=>$extra_val){
               $form_state['values'][$field]['und'][$i][$n][$lang] = array();
              $form_state['values'][$field]['und'][$i][$n][$lang][] = array('value' => $extra_val);
            }//end foreach
            //TODO: Figure out why this extra data isn't being saved
            $obj = (object)$form_state['values'][$field]['und'][$i];
           // drupal_set_message('<h2>Field</h2>' . '<pre>' . print_r($obj, true).'</pre>');
            
          }
        }//end foreach
      }
    } //end foreach
}

/**
 * AJAX Callback to get OpenCalais tag suggestions for an Entity.
 */
function opencalais_get_opencalais_tag_fields($form, $entity, $bundle) {
  $fields = array();
  $entities = opencalais_get_all_entities();
  $instances = field_info_instances($entity, $bundle);
  foreach ($instances as $field_name => $instance) {
    
    if ( isset($instance['settings']['opencalais']) &&$instance['settings']['opencalais'] ) {
      $field = field_info_field($field_name);
      $opencalais_type = $field['settings']['allowed_values'][0]['vocabulary'];    
      if (in_array($opencalais_type, $entities)) {
        $fields[$opencalais_type] = $field_name;
      }
    }
  }
  
  return $fields;
}


/**
 * AJAX Callback to get OpenCalais tag suggestions for an Entity.
 */
function opencalais_suggest_tags_callback($form, &$form_state) {
  
  $node = node_form_submit_build_node($form, $form_state);  
  
  $fields = opencalais_get_opencalais_tag_fields($form, 'node', $node->type);
  
  // Load suggestions  
  $commands = array();
  $extra = array();

  foreach ($fields as $opencalais_type => $field_name) {
    $suggestions = opencalais_get_suggestions($node, $opencalais_type);
    
    $vars = array(
      'type' => $opencalais_type, 
      'field_name' => $field_name, 
      'suggestions' => $suggestions, 
      'language' => $form['language']['#value']
    );
    $themed_suggestions = theme('opencalais_suggestions', $vars); 
    $commands[] = ajax_command_replace("#{$field_name}_suggestions", $themed_suggestions . ' suggested @ ' . date(DATE_RFC822));        
    
    // TODO: If auto-apply, add a command to add/normalize the values in the term reference field
    
    //add extra fields to the session for storage since apparently we can't write to form state
    $extra[$field_name] = $suggestions; 
  }
  
  $form_state['opencalais_extras'] = $extra;
  $form_state['rebuild'] = TRUE;
  
  /**
   *  Because the form state isn't resaved in ajax_form_callback anything we put in the form_state gets destroyed
   *  In order to keep our form_state stuff (the meta data) we need to do this.
   */
  drupal_process_form($form['#form_id'], $form, $form_state);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Gracefully handle JS degredation by providing a multi-step form implementation
 */
function opencalais_suggest_tags_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);  
  $suggestions = opencalais_get_suggestions($node);
}

/**
 *
 */
function opencalais_get_suggestions(&$node, $opencalais_type = NULL) {
  $tag_cache = &drupal_static(__FUNCTION__);

  if ($tag_cache && array_key_exists($node->ocid, $tag_cache)) {
    $suggestions = $tag_cache[$node->ocid];    
  }
  else {
    if(!property_exists($node, 'nid')){
      return; //short circuit out - the node is brand new and being rendered for the first time
    }
    
    // Needed to support caching of unsaved nodes
    if (empty($node->ocid)) {
      $node->ocid = !empty($node->nid) ? $node->nid : uniqid();
    }

    $elements = node_view($node);
    //$body = strip_tags(drupal_render($elements));
    $body = drupal_render($elements);
    $date = format_date($node->created, 'custom', 'r');
  
    // Allow modification of the content sent to Calais
    drupal_alter("opencalais_body", $body, $node);
    
    $opencalais = opencalais_api_get_service();
    //$tags = $opencalais->analyzeXML($node->title, $body, $date);
    $tags = $opencalais->analyzeHTML($body);

    $suggestions = array();    
    foreach ($tags as $type => $metadata) {
      $terms = array();  
      
      $settings = field_info_instance('node', 'opencalais_'.strtolower(substr($type, 0, 15)).'_tags', $node->type);
      foreach ($metadata->terms as $guid => $term) {
        //only add it if its relevant
        if(opencalais_check_suggestion($settings, $term)){
          $terms[$term->name] = array( 
            'relevance' => (float)$term->relevance,
            'extra' => $term->extra
          );
        }
      }  
      $suggestions[$type] = $terms;
    }   
  }

  $tag_cache[$node->ocid] = $suggestions;
  return isset($opencalais_type)  ? isset($suggestions[$opencalais_type]) ? $suggestions[$opencalais_type] : array() : $suggestions;
}

/**
 *  Check whether the term should apply based on the field instance settings
 */
function opencalais_check_suggestion($settings, $term){
  
  if($settings && is_array($settings['settings']) && isset($settings['settings']['threshold'])){
    return $settings['settings']['threshold'] <= $term->relevance;
  }
}

/**
 * Create a new vocabulary with the OpenCalais key as the machine name.
 */
function opencalais_create_vocabulary($entity) {
  $readable = opencalais_api_make_readable($entity);
      $machine = opencalais_make_machine_name($entity);
  if (!taxonomy_vocabulary_machine_name_load($entity)) { 

    
    $vocabulary = (object) array(
      'name' => $readable,
      'description' => t('Tags sourced from OpenCalais about @name.', array('@name' => $readable)),
      'machine_name' => $machine,
      'module' => 'opencalais',
    );
    taxonomy_vocabulary_save($vocabulary);
  } 
  /* Add extra fields for vocabularies that have disabiguation information associated with them
   * We want to do this even for existing fields in case we add more fields in the future ... that way there won't be an issue.
   * @see opencalais_get_extra_fields
   */
  $extra = opencalais_get_extra_fields($entity);
  if($extra){

    $size = count($extra);
    for($i = 0; $i < $size; $i++){
      $e = $extra[$i];

      //we just need to add these as text fields for right now
      $text_field = text_field_info();
  
      // Create all the fields we are adding to our taxonomy term
      // http://api.drupal.org/api/function/field_create_field/7
      $field['field_name'] = strtolower(str_ireplace(' ', '_', $e));
  
      $field['type'] = 'text';
      $field['cardinality'] = 1;
  
      //handle any fieldexceptions that occur by just setting and error message and returning
      try{
      //only try to create the field if it doesn't exist, otherwise just create an instance
        if(!field_read_field($e, array('include_inactive' => TRUE))){
          field_create_field($field);
        }
      } catch (FieldException $f){
        drupal_set_message('Error creating MetaData Field: ' . $f->getMessage(), $type = 'error');
      }
      $instance = current($text_field);
  
      // Create all the instances for our fields.
      // http://api.drupal.org/api/function/field_create_instance/7
      $instance['field_name'] = $field['field_name'];
      $instance['title'] = $e;
      $instance['label'] = 'OpenCalais Metadata: ' . $e;
      $instance['description'] = $vocabulary->description;
  
      $instance['widget'] = array(
        'type' => 'text_textfield',
        'settings' => array(),
        'module' => 'text'
      );
      $instance['entity_type'] = 'taxonomy_term';
      $instance['bundle'] = $entity;
      //handle any fieldexceptions that occur by just setting and error message and returning
      try{
        if(!field_read_instance('taxonomy_term', $instance['field_name'], $content_type)){
          field_create_instance($instance);
          drupal_set_message(t('OpenCalais MetaData Field for '.$readable.' has been successfully created'));
        } else {
          //If the field already exists then we should just update it
          field_update_instance($instance);
          drupal_set_message(t('OpenCalais MetaData Field for '.$readable.' has been successfully updated'));
        }
      } catch (FieldException $f){
        drupal_set_message('Error creating MetaData Field: ' . $f->getMessage(), $type = 'error');
      }
    }
  }
}

/**
 * Get a list of the entities that OpenCalais API defines:
 *    http://d.opencalais.com/1/type/em/e/.html
 *
 * @return array of OpenCalais entities, use local defaults if they cannot be retrieved remotely
 */
function opencalais_get_all_entities() {
  $entities = &drupal_static(__FUNCTION__);
  if (!empty($entities)) {
    return $entities;
  }
  
  $entities = cache_get('opencalais_entities');
  if ($entities) {
   $entities = $entities->data;   
    return $entities;
  }
  // Try to load the entities automagically from opencalais
  $entities = array();
  $response = drupal_http_request('http://d.opencalais.com/1/type/em/e/.html');
  if (!isset($response->error)) {
    $cleaned = preg_replace('/<(link|META)(.*)>/', '', $response->data);
    $doc = simplexml_load_string($cleaned);
    $spans = $doc->xpath("//span[@rtype='entity']");
    
   
    foreach ($spans as $span) {
      $entities[] = (string)$span['label'];       
    }
  }
  else {
    // Defaults
    $entities = array(
      'Anniversary',
      'City',
      'Company',
      'Continent',
      'Country',
      'Currency',
      'EmailAddress',
      'EntertainmentAwardEvent',
      'Facility',
      'FaxNumber',
      'Holiday',
      'IndustryTerm',
      'MarketIndex',
      'MedicalCondition',
      'MedicalTreatment',
      'Movie',
      'MusicAlbum',
      'MusicGroup',
      'NaturalDisaster',
      'NaturalFeature',
      'OperatingSystem',
      'Organization',
      'Person',
      'PhoneNumber',
      'PoliticalEvent',
      'Position',
      'Product',
      'ProgrammingLanguage',
      'ProvinceOrState',
      'PublishedMedium',
      'RadioProgram',
      'RadioStation',
      'Region',
      'SportsEvent',
      'SportsGame',
      'SportsLeague',
      'Technology',
      'TVShow',
      'TVStation',
      'URL'
    );
  }
    
  // Special Reserved Vocabularies    
  array_push($entities, 'SocialTags', 'CalaisDocumentCategory', 'EventsFacts');
  sort($entities);

  cache_set('opencalais_entities', $entities, 'cache', time() + (60 * 60 * 24));  
  return $entities;
}

/*
 *  Functions to add fields to a content_type via a wizard style thingie
 */

  
 /**
  *  Add a field to a content_type - creates a taxonomy field
  *  @param content_type should be the string machine name of a content type
  *  @param field_name should be the string name of the field
  *  @param taxonomy_name should be the machine name of the taxonomy you want to add a linked field to 
  *  Some settings cannot be specified through this function - this is really just a utility wrapper for the fields api
  */
 function opencalais_add_field($content_type, $field_name, $taxonomy_name, $title='', $description='', $threshold=0 ){
   node_types_rebuild();
   
   //since opencalais fields are taxonomy term references
   $taxonomy_field = taxonomy_field_info();
   $taxonomy_widget = taxonomy_field_widget_info();
   
   $taxonomy_widget = key($taxonomy_widget);
   
   // Create all the fields we are adding to our content type.
   // http://api.drupal.org/api/function/field_create_field/7
   $field['field_name'] = strtolower(str_ireplace(' ', '_', $field_name));
  
   $field['type'] = key($taxonomy_field);
   $field['cardinality'] = FIELD_CARDINALITY_UNLIMITED;
   //limit to the proper taxonomy name
   $field['settings']['allowed_values'][0] = array(
     'vocabulary' => $taxonomy_name,
     'parent' => 0,
   );

   //handle any fieldexceptions that occur by just setting and error message and returning
   try{
     //only try to create the field if it doesn't exist, otherwise just create an instance
     if(!field_read_field($field['field_name'], array('include_inactive' => TRUE))){
       field_create_field($field);
       
     }
   } catch (FieldException $f){
     drupal_set_message($f->getMessage(), $type = 'error');
     return;
   }
   $instance = current($taxonomy_field);
   
   // Create all the instances for our fields.
   // http://api.drupal.org/api/function/field_create_instance/7
   $instance['field_name'] = $field['field_name'];
   $instance['title'] = $title ? $title : $field['field_name'];
   $instance['label'] = t('OpenCalais Tags for ') . $taxonomy_name;
   $instance['description'] = $description;
           
   $instance['widget'] = array(
     'type' => $taxonomy_widget,
     'settings' => array(),
     'module' => 'taxonomy'
   );
   $instance['entity_type'] = 'node';
   $instance['bundle'] = $content_type;
   $instance['settings']['threshold'] = $threshold;
   $instance['settings']['opencalais'] = TRUE; //Flag so we can know which fields belong to this module.
 
 
  
     //handle any fieldexceptions that occur by just setting and error message and returning
     try{
       if(!field_read_instance('node', $instance['field_name'], $content_type)){
         field_create_instance($instance);
         drupal_set_message(t('OpenCalais Field for '.$taxonomy_name.' has been successfully created'));
       } else {
         //If the field already exists then we should just update it
         field_update_instance($instance);
         drupal_set_message(t('OpenCalais Field for '.$taxonomy_name.' has been successfully updated'));
       }
     } catch (FieldException $f){
       drupal_set_message($f->getMessage(), $type = 'error');
       return;
     }
    }
 
 /**
  *  Create all the fields for a content type 
  *  All fields will be named 'opencalais_<vocab_name>_tags 
  *  @see opencalais_create_vocabulary for more information on machine name creation
  *  
  *  @param content_type - the string name of the content type
  *  @param vocabs - an array of vocab names, if specified this will limit the vocabularies to those in the list
  */
 function opencalais_create_fields($content_type, $vocabs = array(), $all = FALSE){
   if(!$vocabs && $all){
     $vocabs = opencalais_get_all_entities();
   }
   
   foreach($vocabs as $vname => $vocab){
     //add the field 
     $name = substr($vname, 0, 15);  
     opencalais_add_field($content_type, 'opencalais_'.$name.'_tags', $vname, 'OpenCalais Tags for ' . $vname, '', $vocab['threshold']);
   }
 } 
 
 /**
  *  Remove fields from a content type (actually removes instances)
  *  @param content_type - the string name of the content type
  *  @param vocabs - an array of vocab names to remove
  */
 function opencalais_remove_fields($content_type, $fields){
   foreach($fields as $vname => $vocab){
     //add the field 
     $name = substr($vname, 0, 15);  
     $instance['field_name'] = 'opencalais_'.$name.'_tags';
     $instance['bundle'] = $content_type;
     $instance['entity_type'] = 'node';
     
     field_delete_instance($instance);
     drupal_set_message('OpenCalais Field for ' . $vname . ' has been successfully deleted');
   }
 }
 
 /**
  *  Returns an array of opencalais entities which already have a field on a given content type
  *  @param content_type - the machine name of the content type to find the fields for
  */
 function opencalais_get_fields_for_content_type($content_type){
   $fields = field_info_instances('node', $content_type);
   
   $entities = opencalais_get_all_entities();
   
   $existing = array();
   
   //fields will be an empty array if no instances are found
   foreach($fields as $field_name => $field){
        
     if (isset($field['settings']['opencalais']) && $field['settings']['opencalais']) {
       $main_field = field_info_field($field_name);
       $opencalais_type = $main_field['settings']['allowed_values'][0]['vocabulary'];    
       if (in_array($opencalais_type, $entities)) {
         $existing[$opencalais_type] = array('field' => $field_name, 'threshold' => $field['settings']['threshold']);
       }
     }
   }

   return $existing;
 }
 
 /**
  *  Implements Forms Api to create a form to add the fields necessary for OpenCalais to a content type.
  */
  function opencalais_add_fields_form($content_type){
    //Handle any errors on the form
    if (!empty($_POST) && form_get_errors()) {
      drupal_set_message(t('The fields have not been created because of the errors.'), 'error');
    }
    
    //try to get the content type from the arguments (or passed via menu system) (/admin/structure/types/manage/<typename>)
    //can't do anything if its not there so just return
    $content_type = $content_type ? $content_type : arg(4);
    $content_type = str_ireplace('-', '_', $content_type);
    if(!$content_type){ 
    
      drupal_set_message(t('An error has occured, no content type was specified'), 'error');
      return array(); 
    }
    
    $form = array();
    
    $opencalais_entities = opencalais_get_all_entities();
    _opencalais_make_keys($opencalais_entities);
    
    $existing = opencalais_get_fields_for_content_type($content_type);
    
    $form['content_type'] = array(
      '#type' => 'hidden',
      '#value' => str_ireplace('-', '_', $content_type),
    );
    
    $form['info']['config'] = array('#tree' => TRUE);
    $form['info']['config']['entities'] = array('#tree' => TRUE);
  
    $entities = $opencalais_entities;
    sort($entities);
    
    $entity_defaults = isset($item->config['entities']) ? $item->config['entities'] : array('enabled' => FALSE, 'threshold' => 0.0);
    
    foreach ($entities as $entity) {
     
      $defaults = isset($entity_defaults[$entity]) ? $entity_defaults[$entity] : $entity_defaults;
      //load in defaults for existing fields
      $defaults['enabled'] = isset($existing[$entity]) ? TRUE : FALSE;
      $defaults['threshold'] = isset($existing[$entity]) ? $existing[$entity]['threshold'] : $defaults['threshold'];
      
      $form['info']['config']['entities'][$entity]['existing'] = array(
        '#type' => 'hidden',
        '#value' => isset($existing[$entity]) ? TRUE : FALSE
      );
      
      $form['info']['config']['entities'][$entity]['enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Create'),
        '#title_display' => 'invisible',
        '#default_value' => $defaults['enabled'],
        '#description' => t('Should this content type be tagged with this category'),
      );
      $form['info']['config']['entities'][$entity]['threshold'] = array(
        '#type' => 'textfield',
        '#size' => 5,
        '#title' => t('Minimum suggested tag relevancy'),
        '#title_display' => 'invisible',
        '#default_value' => $defaults['threshold'],
        '#description' => t('Determine how relevant a term must be in order for Calais to suggest it for a particular node.  Based on a 0.00-1.00 scale, with 0.00 being least relevant (i.e. many terms appear).'),
        '#attributes' => array('class' => array('threshold_slider')),
      );
    }
    
    $form['info']['#theme'] = 'opencalais_add_fields_entities';
    //create the buttons and submit handlers and such
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Save Fields'),
    );
    
    // This is to create a help block to explain some things about the form
    
    $help_text  = 'This form will allow you to create taxonomy term references on your content type that correspond to ';
    $help_text .= 'OpenCalais categories (<em>taxonomy vocabularies</em>).';
    
    $usage_text  = 'Simply select the categories that apply to your content by checking their checkbox and then use the slider to set ';
    $usage_text .= 'the relevancy threshold which a term must meet to be applied.'; 
    
    $notes_text = 'Note: When saving with already existing fields, a message will appear that the field(s) have been successfully updated.  Each field is always resaved so this is normal.';
    
    $form['help'] = array(
      '#type' => 'item',
      '#title' => t('OpenCalais Fields Help'),
      '#description' => t('Help with this form'),
      '#markup' => '<br/><p>' . t($help_text) . '</p><br/><p>' . t($usage_text) . '</p><br/><p><em>' . t($notes_text) . '</em></p>',
      '#prefix' => '<div class="">',
      '#suffix' => '</div>'
    );
    
    $form['#submit'][] = 'opencalais_add_fields_submit';
    
    $form['#theme'] = 'system_settings_form';

    return $form;
  }
  
  function opencalais_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
    //only show the threshold editor for nodes created by opencalais (nodes that already have a threshold and have the correct name)
    if(isset($form['#instance']['settings']['threshold']) && stristr($form['#field']['field_name'], 'opencalais_')){
      $form['instance']['settings']['threshold'] = array(
        '#type' => 'textfield',
        '#title' => t('OpenCalais Threshold Value'),
        '#description' => t('How relevant a term must be to be applied to a node. This is only utilized on OpenCalais Fields.'),
        '#default_value' => $form['#instance']['settings']['threshold'],
      );
      if(!is_array($form['#validate'])){
        $form['validate'] = array();
      }
      $form['#validate'][] = 'opencalais_check_threshold';
    }
  }

  /**
   *  Simple Validator for the system settings form;
   */
  function opencalais_check_threshold($form, $form_state){
    $threshold = $form_state['values']['instance']['settings']['threshold'];
    if(!isset($threshold) || $threshold < 0 || $threshold > 1){
      form_set_error('instance[settings][threshold]', 'Threshold must be between 0 and 1');
    } 
  }
  
  
  /**
   *  Proprocessor for the system_settings form form to move OpenCalais Terms to the sidebar
   */
  function opencalais_preprocess_system_settings_form(&$variables){
    if($variables['form']['#form_id'] == 'opencalais_add_fields_form'){
      //push the help into the sidebar
      
      $variables['sidebar'][] = $variables['form']['help'];
      unset($variables['form']['help']);
      
    }
  }
  
  
  //just used to filter out disabled fields
  function _opencalais_filter($item){ return $item['enabled']; }
  
  function _opencalais_delete_filter($item){ return !$item['enabled'] && $item['existing']; }
  
  /**
   *  Function to handle the submit from the add_fields form
   */
  function opencalais_add_fields_submit($form, &$form_state){
    $content_type = $form_state['values']['content_type'];
    
    $to_add = array_filter($form_state['values']['config']['entities'], '_opencalais_filter');
    $to_rem = array_filter($form_state['values']['config']['entities'], '_opencalais_delete_filter');
    opencalais_create_fields($content_type, $to_add);
    opencalais_remove_fields($content_type, $to_rem);
    
  }
  
  //A Utility function to take a numericly keyed array and make it value=>value for use with forms api
  function _opencalais_make_keys(&$array){
    $new_array = array();
    foreach($array as $key=>$value){
      
      $new_array[$value] = $value;
    }
    $array = $new_array;
  }
  
  /**
   *  A Utility function used to turn any string into a valid machine name
   */
  function opencalais_make_machine_name($name){
    $name = str_replace(' ', '_', $name);
    $name = preg_replace('/([a-z])([A-Z])/', '$1_$2', $name);
    $name = strtolower($name);
    return $name;
  }
  
  /**
   *  Retrieve a list of extra fields to apply to a vocabulary
   */
  function opencalais_get_extra_fields($vocab){
    $geo = array('City', 'Country', 'ProvinceOrState');
    $company = array('Company');
    $product = array('Product');
    
    if(in_array($vocab, $geo)){
      return array('Latitude', 'Longitude', 'ContainedByState', 'ContainedByCounty');
    } else if(in_array($vocab, $company)){
      return array('Ticker', 'LegalName');
    } else if(in_array($vocab, $product)){
      return array();
    }
  }
  