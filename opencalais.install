<?php
/**
 * @file opencalais.install
 */
 
/**
 * Implements hook_install().
 */
function opencalais_install() {
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'opencalais'");
  foreach (opencalais_get_all_entities() as $entity) {
    opencalais_create_vocabulary($entity);
  }
  //create a queue for bulk processing
  $queue = DrupalQueue::get('opencalais_tagging_queue');
  $queue->createQueue();
}

/**
 * Implements hook_uninstall().
 */
function opencalais_uninstall() {
}

/**
 *  Update existing fields to the new format
 */
function opencalais_update_7001(){
  drupal_load('module', 'field');
  drupal_load('module', 'opencalais');
  $content_types = _opencalais_get_content_types();
  foreach($content_types as $ct=>$info){
    $fields = _opencalais_update_fields_for_content_type($ct);
  }  
  
  return t('Fields Successfully Updated');
}


/**
  *  Update fields to the new version
  *  @param content_type - the machine name of the content type to find the fields for
  */
 function _opencalais_update_fields_for_content_type($content_type){
   $fields = field_info_instances('node', $content_type);

   $entities = opencalais_get_all_entities();
   foreach($entities as $key=>$item){
     $entities[$key] = opencalais_make_machine_name($item);
   }

   //fields will be an empty array if no instances are found
   foreach($fields as $field_name => $field){

     if (isset($field['settings']['opencalais']) && $field['settings']['opencalais']) {
       $main_field = field_info_field($field_name);
       $opencalais_type = $main_field['settings']['allowed_values'][0]['vocabulary'];
       if (in_array($opencalais_type, $entities)) {
         $field['settings']['opencalais'] = $opencalais_type;
         try{
           field_update_instance($field);
           drupal_set_message(t('%field on %type has been successfully updated', array('%field' => $field['label'], '%type'=>$content_type)));
         } catch (FieldException $fe) {
           drupal_set_message(t('Unable to update field %field on %type, you will need to manually update it', array('%field'=>$field['label'], '%type'=>$content_type)), 'error');
         }
       }
     }
   }
 }

/**
 *  Update the autotagging variables to be a single variable  
 */
 function opencalais_update_7002(){
   drupal_load('module', 'opencalais');
 
   $content_types = _opencalais_get_content_types();
   $new_auto = variable_get('opencalais_autotagging', array());
   foreach($content_types as $ct=>$info){
     $auto = variable_get('opencalais_' . $ct . '_autotagging', FALSE);
     if($auto){
       $new_auto[$ct] = $auto == 'automatic' ? 1 : 0;
     }
     variable_del('opencalais_'.$ct.'_autotagging');
   } 
   variable_set('opencalais_autotagging', $new_auto);
   return 'OpenCalais variables successfully updated.';
 }

/**
 * Implements hook_schema().
 */
function opencalais_schema() {
  $schema['opencalais_preset'] = array(
    'description' => 'OpenCalais presets',
    'export' => array(
      'key' => 'name',
      'identifier' => 'preset',                // Exports will be as $preset
      'default hook' => 'opencalais_default_preset',  // Function hook name.
      'api' => array(
        'owner' => 'opencalais',
        'api' => 'opencalais_default_presets',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'pid' => array(
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE, // Do not export database-only keys.
      ),
      'name' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE,
        'description' => 'Unique ID for presets. Used to identify them programmatically.'
      ),
      'title' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE,
        'description' => 'Unique ID for presets. Used to identify them programmatically.'
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'A human readable name of a preset.',
      ),
      'entity' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Entity type',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Bundle',
      ),
      'process' => array(
        'type' => 'int',
        'description' => 'How to process the tags for the entity',
      ),
      'config' => array(
        'type' => 'text',
        'serialize' => TRUE,      
      ),
    ),    
    'primary key' => array('pid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
  $schema['opencalais_term'] = array(
    'description' => 'Holds retrieved OpenCalais terms and the Vocabulary to which they are associated',
    'fields' => array(
      'tid' => array(
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
        'description' => 'Identifier for an OpenCalais term'
      ),
      'name' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE,
        'description' => 'The name of the term'
      ),
      'type' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE,
        'description' => 'The type of the term'
      ),
      'vocabulary' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE, 
        'description' => 'The Vocabulary machine name this term is in'
      ),
      'tdid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'description' => 'The Taxonomy Term ID for this OpenCalais Term'
      ),
      'guid' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE,
        'description' => 'The OpenCalais GUID of this term'
      ),
      'resolved_guid' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'description' => 'The Disambiguated OpenCalais GUID of this term (if it exists)'
      ),
      'resolved_name' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'description' => 'The normalized/resolved name of the term'
      ),
      'resolved_type' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'description' => 'The disambiguated type of this Entity'
      ),
    ),
    'indexes' => array(
      'vocabulary' => array('vocabulary'),
      'tdid' => array('tdid'),
      'guid' => array('guid'),
    ),
    'foreign keys' => array(
      'opencalais_term_taxonomy_term_tid' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('tdid' => 'tid'),
       ),
      'opencalais_term_vocabulary_vid' => array(
        'table' => 'taxonomy_vocabulary',
        'columns' => array('vocabulary' => 'machine_name'),
       ),
    ),    
    'primary key' => array('tid'),
  );
  
  $schema['opencalais_term_node'] = array(
    'description' => 'Holds the association between a retrieved OpenCalais term and a Node',
    'fields' => array(
      'tid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'not null' => TRUE, 
        'default' => 0,
        'description' => t('The term identifier')
      ),
      'nid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'not null' => TRUE, 
        'default' => 0,
        'description' => t('The node for this term')
      ),
      'relevance' => array(
        'type' => 'numeric', 
        'size' => 'normal', 
        'not null' => TRUE, 
        'default' => 0.0, 
        'precision' => 5, 
        'scale' => 3,
        'description' => t('The relevence score from OpenCalais for this term/node combination')
        ),
    ),
    'indexes' => array(
      'tid'    => array('tid'),
      'nid'    => array('nid'),
    ),
    'primary key' => array('tid', 'nid'),
  );
  
  return $schema;
}
 
function _opencalais_update_7000() {
  // Migrate all data from old tables to new tables

  // Migrate configuration to presets
  
  // Migrate permissions
  
  
}

  