<?php

/**
 * @file
 * The Drupal install file with schema and update hooks.
 */

/**
 * Implements hook_install().
 */
function opencalais_install() {
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'opencalais'");
  foreach (opencalais_get_all_entities() as $entity) {
    opencalais_create_vocabulary($entity);
  }
  //create a queue for bulk processing
  $queue = DrupalQueue::get('opencalais_tagging_queue');
  $queue->createQueue();
}

/**
 * Implements hook_uninstall().
 *
 * We need to remove all of our fields and taxonomies from Drupal in accordance with doing
 * things "the Drupal way".
 */
function opencalais_uninstall() {

}

/**
 * Update fields to the new version.
 *
 * @param string content_type
 *   The machine name of the content type to find the fields for.
 */
function _opencalais_update_fields_for_content_type($content_type) {
  $fields = field_info_instances('node', $content_type);

  $entities = opencalais_get_all_entities();
  foreach ($entities as $key => $item) {
    $entities[$key] = opencalais_make_machine_name($item);
  }

  // fields will be an empty array if no instances are found
  foreach ($fields as $field_name => $field) {

    if (isset($field['settings']['opencalais']) && $field['settings']['opencalais']) {
      $main_field = field_info_field($field_name);
      $opencalais_type = $main_field['settings']['allowed_values'][0]['vocabulary'];
      if (in_array($opencalais_type, $entities)) {
        $field['settings']['opencalais'] = $opencalais_type;
        try{
          field_update_instance($field);
          drupal_set_message(t('%field on %type has been successfully updated', array('%field' => $field['label'], '%type' => $content_type)));
        } catch (FieldException $fe) {
          drupal_set_message(t('Unable to update field %field on %type, you will need to manually update it', array('%field' => $field['label'], '%type' => $content_type)), 'error');
        }
      }
    }
  }
}

/**
 * Update existing fields to the new format.
 */
function opencalais_update_7001() {
  drupal_load('module', 'field');
  drupal_load('module', 'opencalais');
  $content_types = _opencalais_get_content_types();
  foreach ($content_types as $ct => $info) {
    $fields = _opencalais_update_fields_for_content_type($ct);
  }

  return t('Fields Successfully Updated');
}

/**
 * Update the autotagging variables to be a single variable .
 */
function opencalais_update_7002() {
  drupal_load('module', 'opencalais');
  $content_types = _opencalais_get_content_types();
  $new_auto = variable_get('opencalais_autotagging', array());
  foreach ($content_types as $ct => $info) {
    $auto = variable_get('opencalais_' . $ct . '_autotagging', FALSE);
    if ($auto) {
      $new_auto[$ct] = $auto == 'automatic' ? 1 : 0;
    }
    variable_del('opencalais_' . $ct . '_autotagging');
  }
  variable_set('opencalais_autotagging', $new_auto);
  return 'OpenCalais variables successfully updated.';
}

/**
 * Update the api server to the one for Thomson Reuters.
 */
function opencalais_update_7101() {
  variable_set('opencalais_api_server', 'api.thomsonreuters.com');
}

/**
 * Update to remove semantic proxy class and calls.
 */
function opencalais_update_7102() {
  variable_get('opencalais_default_impl', 'CalaisService');
}
