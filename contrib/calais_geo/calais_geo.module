<?php
/*
  Copyright (C) 2008 by Phase2 Technology.
  Author(s): Frank Febbraro

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY. See the LICENSE.txt file for more details.

  $Id$
*/
/**
 * @file
 */

/**
 * Implementation of hook_theme().
 */
function calais_geo_theme() {
  return array(
    'calais_geo_marker_text' => array(
      'arguments' => array('node' => NULL, 'term' => NULL),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function calais_geo_menu() {
  
  $items['admin/settings/calais/geo'] = array(
    'title' => 'Calais Geo Settings',
    'description' => 'Configuration for Calais based Geomapping.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calais_geo_settings_form'),
    'access arguments' => array('administer calais'),
    'file' => 'calais_geo.admin.inc',
  );
  $items['calais/geo/preview'] = array(
    'title' => 'Calais Geo Map Preview',
    'page callback' => 'calais_geo_preview',
    'access arguments' => array('administer calais'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function calais_geo_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      return _calais_geo_block_list();
      break;
    case 'configure':
      return _calais_geo_block_configure($delta);
      break;
    case 'save':
      return _calais_geo_block_save($delta, $edit);
      break;
    case 'view':
      return _calais_geo_block_view($delta);
      break;
  }
}

/**
 * Provide block listing.
 */
function _calais_geo_block_list(){
  $blocks = array();  
  $blocks[0] = array(
    'info' => t('Calais Geo Block'),
  );
  return $blocks;
}

/**
 * Display geo block.
 */
function _calais_geo_block_view($delta){
  switch ($delta) {
    case 0:    
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $block['subject'] = t('Calais Geo Block');
        $block['content'] = calais_geo_block_contents($delta, arg(1));
      }
      break;
  }
  return $block;
}

/**
 * Render the body of the geo block.
 */
function calais_geo_block_contents($delta, $nid){
  $node = node_load($nid);
  $geo_data = calais_geo_load($node->vid);
  return _calais_geo_render_map($node, $geo_data);
}

/**
 * Fetch the geo data for a node
 *
 * @param vid
 *    The Node Revision ID
 * @return
 *    An object with the geo data to render
 */
function calais_geo_load($vid){
  $geo_data = db_fetch_object(db_query('SELECT * FROM {calais_geo} WHERE vid = %d', $vid));
  if($geo_data) {
    $geo_data->terms = array();
    $result = db_query('SELECT * FROM {calais_geo_term} WHERE vid = %d', $vid);
    while ($geoterm = db_fetch_object($result)) {
      $geo_data->terms[] = $geoterm;
    }
  } 
  return $geo_data;
}

/**
 * Save the geo data for this particular node id.
 *
 * @param node
 *    The Node to save
 * @param $data
 *    The geo data to save. Can be an object or an array.
 */
function calais_geo_save($node, $data){
  $data = (array)$data;
  $data['nid'] = $node->nid;
  $data['vid'] = $node->vid;
  $data['center_lat'] = '';
  $data['center_lon'] = '';
    
  // Process the map center (if needed)
  $center = $data['term_center'];
  if(!empty($center)) {
    if($center == 'latlon' && !empty($data['latlon_center'])) {
      list($lat, $lon) = explode(',', $data['latlon_center']);
      $data['center_lat'] = $lat;
      $data['center_lon'] = $lon;
    }
    else {
      $result = _calais_geo_get_latlon($center);
      if($result) {
        $data['center_lat'] = $result['lat'];
        $data['center_lon'] = $result['lon'];
      }
    }
  }
    
  if(db_result(db_query('SELECT count(*) FROM {calais_geo} WHERE vid = %d', $node->vid)) == 1) {
    drupal_write_record('calais_geo', $data, 'vid');
  }
  else {
    drupal_write_record('calais_geo', $data);
  }

  db_query('DELETE FROM {calais_geo_term} WHERE vid = %d', $node->vid);

  foreach ($data['terms'] as $term) {
    $result = _calais_geo_get_latlon($term);
    if($result) {
      $geoterm = array('nid' => $node->nid, 'vid' => $node->vid, 'term' => $term);
      $geoterm['lat'] = $result['lat'];
      $geoterm['lon'] = $result['lon'];
      drupal_write_record('calais_geo_term', $geoterm);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function calais_geo_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];
    
    $geo_vocabs = variable_get('calais_geo_vocabularies', array());
    
    if($node->taxonomy) {
      $options = array();
      foreach ($node->taxonomy as $term) {
        if(in_array($term->vid, $geo_vocabs)) {
          $vocab = taxonomy_vocabulary_load($term->vid);
          $key = $vocab->name;
          
          if(!array_key_exists($key, $options)) {
            $options[$key] = array();
          }
          // Remove quotes surrounding terms
          $term_name = preg_replace('/^"(.*)"$/', '\1', $term->name);
          $options[$key][$term_name] = $term_name;
        }
      }
    }
    
    if(empty($options))
      return; // No options to maps
    
    $geo_data = calais_geo_load($node->vid);
    if ($geo_data) {
      foreach($geo_data->terms as $term){
        $default_terms[] = $term->term;
      }
    }

    $form['calais_geo'] = array(
      '#type' => 'fieldset',
      '#title' => t('Calais Geotagging'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['calais_geo']['terms'] = array(
      '#type' => 'select',
      '#title' => t('Select the terms to map'),
      '#description' => t('You can select multiple terms by ctrl+click or apple+click.'),
      '#multiple' => TRUE,
      '#size' => 5,
      '#default_value' => $default_terms,
      '#options' => $options,
    );
    $form['calais_geo']['term_center'] = array(
      '#type' => 'select',
      '#title' => t('Center map on this specific term'),
      '#description' => t('Optionally, the map could be centered on the most relevant mapped term. Select <default> to use the map default which centers the map amongst your term markers, or <manual> to specify a latitude and longitude using the Manual center field below.'),
      '#default_value' => $geo_data->term_center,
      '#options' => array_merge(array('' => '<default>', 'latlon' => '<manual>'), $options),
    );
    $form['calais_geo']['latlon_center'] = array(
      '#type' => 'textfield',
      '#title' => t('Manual center'),
      '#default_value' => $geo_data->latlon_center,
      '#size' => 25,
      '#maxlength' => 255,
      '#description' => t('The default center coordinates of the map, expressed as a decimal latitude and longitude, separated by a comma. This will be used if values are entered and the Term Center is set to <manual>. Leave blank to allow the map to auto center itself amongst your term markers.'),
    );
    $form['calais_geo']['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Map width'),
      '#default_value' => $geo_data->width,
      '#size' => 10,
      '#maxlength' => 25,
      '#description' => t('The default width of a Google map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>. Leave blank to use the defaults.'),
    );   
    $form['calais_geo']['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Map height'),
      '#default_value' => $geo_data->height,
      '#size' => 10,
      '#maxlength' => 25,
      '#description' => t('The default height of the map, expressed as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>. Leave blank to use the defaults.'),
    );
    $form['calais_geo']['zoom'] = array(
      '#type' => 'select',
      '#title' => t('Map zoom'),
      '#default_value' => $geo_data->zoom,
      '#options' => array_merge(array('' => ''), drupal_map_assoc(range(0, 17))),
      '#description' => t('The zoom level of a the map. Leave blank to use the defaults.'),
    );
    /*
    $form['calais_geo']['preview_buttom'] = array(
      '#type' => 'button',
      '#value' => t('Preview Map'),
      '#weight' => 20,
      '#ahah' => array(
        'path' => 'calais/geo/preview',
        'wrapper' => 'calais-geo-preview',
        'method' => 'replace',
        'effect' => 'fade',
      )
    );
    $form['calais_geo']['preview_map'] = array(
      '#type' => 'markup',
      '#weight' => 21,
      '#value' => '&nbsp;',
      '#prefix' => '<div id="calais-geo-preview">',
      '#suffix' => '</div>',
    );
    */
    // Javacsript to show/hide manual center
    drupal_add_js('$(document).ready(function() {
      if($("#edit-calais-geo-term-center").val() != "latlon") {
        $("#edit-calais-geo-latlon-center-wrapper").hide();          
      }
      $("#edit-calais-geo-term-center").change(function() {
        if($(this).val() == "latlon") {
          $("#edit-calais-geo-latlon-center-wrapper").slideDown("slow");          
        }
        else {
          $("#edit-calais-geo-latlon-center-wrapper").slideUp("slow");          
        }
      });
    });', 'inline');
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function calais_geo_nodeapi(&$node, $op) {
  
  switch ($op) {
    case 'insert':
    case 'update':
      if($node->calais_geo) {
        calais_geo_save($node, $node->calais_geo);
      }
      break;
    case 'delete':
      db_query('DELETE FROM {calais_geo} WHERE nid = %d', $node->nid);
      db_query('DELETE FROM {calais_geo_term} WHERE nid = %d', $node->nid);
      break;
    case 'view':
      $geo = calais_geo_load($node->vid);
      if($geo) {
        $node->calais_geo_map = _calais_geo_render_map($node, $geo);
      }
      break;
  }
}

/**
 * Render a preview of the map (not used yet)
 */
function calais_geo_preview() {
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $node = $form['#node'];
  
  $output = _calais_geo_render_map($node, $_POST['calais_geo']);
  return drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Build the map.
 */
function _calais_geo_render_map($node, $geo_data) {
  
  $geo_data = (array)$geo_data;

  if(!isset($geo_data['terms']))
    return; // Nothing to map
  
  foreach($geo_data['terms'] as $term) {
    $marker = array(
      'text' => theme('calais_geo_marker_text', $node, $term),
      'latitude' => floatval($term->lat),
      'longitude' => floatval($term->lon),
    );
    $markers[] = $marker;
  }

  $settings = array(
    'markers' => $markers
  );

  if(!empty($geo_data['width'])) {
    $settings['width'] = $geo_data['width'];
  }
  if(!empty($geo_data['height'])) {
    $settings['height'] = $geo_data['height'];
  }
  if(!empty($geo_data['zoom'])) {
    $settings['zoom'] = $geo_data['zoom'];
  }
  if(!empty($geo_data['center_lat'])) {
    $settings['latitude'] = $geo_data['center_lat'];
  }
  if(!empty($geo_data['center_lon'])) {
    $settings['longitude'] = $geo_data['center_lon'];
  }

  $map_data = array(
    '#settings' => $settings,
  );

  // Hook to allow other modules/themes to make modifications before rendering
  foreach (module_implements('calais_geo_map') as $module) {
    $function = $module .'_calais_geo_map';
    call_user_func_array($function, array(&$map_data));
  }                      

  $output = theme('gmap', $map_data);
  return $output;
}

/* Example of implementing this hook
function calais_geo_calais_geo_map(&$map_data) {
  foreach ($map_data['#settings']['markers'] as $key => &$marker) {
    $marker['markername'] = "orange";
  }
}
*/

/**
 * Execute a keyword search on the geonames service to retrieve lat/lon for a name.
 *
 * We are searching only on the following featureclasses:
 *    p = city, village, ...
 *    a = country, state, region, ...
 *
 * @see http://www.geonames.org/export/geonames-search.html
 * @see http://www.geonames.org/export/codes.html
 */
function _calais_geo_get_latlon($term) {
  $params = array(
    'name' => $term, 
    'maxrows' => 1, 
    'featureclass' => array('p', 'a'),
  );
  
  $result = geonames_query('search', $params);
  if(count($result->results) > 0) {
    $data = array(
      'lat' => $result->results[0]['lat'],
      'lon' => $result->results[0]['lng'],
    );
  }
  else {
    drupal_set_message(t('No Geoname results found for !term', array('!term' => $term)));
  }
  return $data;
}

/**
 * Default theme function to rendering the text that goes in the Google Map marker bubble.
 */
function theme_calais_geo_marker_text($node, $term) {
  return "<h3>$term->term</h3>";
}
